/* MyBasic.java */
/* Generated By:JavaCC: Do not edit this line. MyBasic.java */
package edu.itsco;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import edu.itsco.semantica.*;
import java.util.ArrayList;

public class MyBasic implements MyBasicConstants {

  private static AdministraFunciones adminFunciones;

  public static void main(String args [])
  {
    //MyBasic parser = new MyBasic(System.in);
    try {
        adminFunciones = new AdministraFunciones();
            MyBasic parser = new MyBasic(
                new FileInputStream("entrada.txt"));
            System.out.println("Bienvenidos al compilador");
            parser.principal();
                adminFunciones.validaPrincipal();
            System.out.println("Compilo correctamente");
        }catch(FileNotFoundException fex) {
                System.err.println("No encuento el archivo");
        }catch(ParseException pex) {
                System.err.println(pex.getMessage());
        }catch(SemanticException se) {
                System.err.println(se.getMessage());
        }catch(Exception e) {
                System.err.println(e.getMessage());
        }
  }

/* Gramaticas */
  static final public void principal() throws ParseException, SemanticException {
    jj_consume_token(INICIO);
    jj_consume_token(ID);
    label_1:
    while (true) {
      gramaticaFuncion();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCION:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(FIN);
}

  static final public void gramaticaFuncion() throws ParseException, SemanticException {Token id;
  int numArgumentos = 0;
  ArrayList<Variable > argumentos = new ArrayList<Variable>();
    jj_consume_token(FUNCION);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTERO:
    case DECIMAL:
    case CADENA:{
      tipoDato();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    id = jj_consume_token(ID);
    jj_consume_token(AP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      argumentos = argumentos();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(CP);
Funcion funcion = new Funcion();
                funcion.setId(id.image);
                funcion.setNumArgumentos(argumentos.size());
                funcion.setArgumentos(argumentos);
                adminFunciones.agregaFuncion(funcion);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case IMPRIMIR:
      case LEER:
      case SI:
      case SELECCIONA:
      case DESDE:
      case MIENTRAS:
      case HACER:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      sentencias(funcion);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REGRESA:{
      jj_consume_token(REGRESA);
      valor(funcion);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
}

  static final public ArrayList<Variable> argumentos() throws ParseException {int numArgumentos = 1;
        Token id;
        Token tipoDato;
        ArrayList<Variable> variables = new ArrayList<Variable>();
    jj_consume_token(VAR);
    id = jj_consume_token(ID);
    jj_consume_token(DP);
    tipoDato = tipoDato();
Variable v = new Variable(id.image, tipoDato.image);
          v.setInicializada(true);
          variables.add(v);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMA);
      jj_consume_token(VAR);
      id = jj_consume_token(ID);
      jj_consume_token(DP);
      tipoDato = tipoDato();
variables.add(new Variable(id.image, tipoDato.image));
    }
//return numArgumentos;
          {if ("" != null) return variables;}
    throw new Error("Missing return statement in function");
}

  static final public Token tipoDato() throws ParseException {Token tipo;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTERO:{
      tipo = jj_consume_token(ENTERO);
      break;
      }
    case DECIMAL:{
      tipo = jj_consume_token(DECIMAL);
      break;
      }
    case CADENA:{
      tipo = jj_consume_token(CADENA);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return tipo;}
    throw new Error("Missing return statement in function");
}

  static final public String valor(Funcion funcion) throws ParseException, SemanticException {String valor;
  Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALOR_ENTERO:{
      jj_consume_token(VALOR_ENTERO);
valor = "entero";
      break;
      }
    case VALOR_DECIMAL:{
      jj_consume_token(VALOR_DECIMAL);
valor = "decimal";
      break;
      }
    case VALOR_CADENA:{
      jj_consume_token(VALOR_CADENA);
valor = "cadena";
      break;
      }
    case ID:{
      id = identificador();
valor = id.image;
          Variable v = new Variable(id.image);
          funcion.existeVariable(v);
          funcion.variableInicializada(v);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return valor;}
    throw new Error("Missing return statement in function");
}

  static final public Token identificador() throws ParseException {Token id;
    id = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AC:{
      jj_consume_token(AC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VALOR_ENTERO:{
        jj_consume_token(VALOR_ENTERO);
        break;
        }
      case ID:{
        jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CC);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
{if ("" != null) return id;}
    throw new Error("Missing return statement in function");
}

  static final public void sentencias(Funcion funcion) throws ParseException, SemanticException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      declararVariable(funcion);
      break;
      }
    case IMPRIMIR:{
      gramaticaImprimir(funcion);
      break;
      }
    case LEER:{
      gramaticaLeer(funcion);
      break;
      }
    case SI:{
      gramaticaIf(funcion);
      break;
      }
    case DESDE:{
      gramaticaFor(funcion);
      break;
      }
    case MIENTRAS:{
      gramaticaWhile(funcion);
      break;
      }
    case HACER:{
      gramaticaHacer(funcion);
      break;
      }
    case SELECCIONA:{
      gramaticaSwitch(funcion);
      break;
      }
    case ID:{
      decideFuncionOAsignacion(funcion);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void declararVariable(Funcion funcion) throws ParseException, SemanticException {Token id;
  Token tipo;
    jj_consume_token(VAR);
    id = identificador();
    jj_consume_token(DP);
    tipo = tipoDato();
Variable v = new Variable(id.image, tipo.image);
          funcion.agregarVariable(v);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:
      case VALOR_ENTERO:
      case VALOR_DECIMAL:
      case VALOR_CADENA:{
        valor(funcion);
        break;
        }
      case AC:{
        inicializaArreglo(funcion);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
v.setInicializada(true);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
}

  static final public void inicializaArreglo(Funcion funcion) throws ParseException, SemanticException {
    jj_consume_token(AC);
    valor(funcion);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMA);
      valor(funcion);
    }
    jj_consume_token(CC);
}

//Gramatica imprimir
  static final public void gramaticaImprimir(Funcion funcion) throws ParseException, SemanticException {
    jj_consume_token(IMPRIMIR);
    jj_consume_token(AP);
    valor(funcion);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMA);
      valor(funcion);
    }
    jj_consume_token(CP);
}

//Gramatica Leer
  static final public void gramaticaLeer(Funcion funcion) throws ParseException, SemanticException {Token id;
    jj_consume_token(LEER);
    jj_consume_token(AP);
    id = identificador();
    jj_consume_token(CP);
Variable v = new Variable(id.image);
          funcion.existeVariable(v);
          funcion.inicializaVariable(v);
}

  static final public void decideFuncionOAsignacion(Funcion funcion) throws ParseException, SemanticException {Token id;
    //id = < ID >
            id = identificador();
Variable v = new Variable(id.image);
          /*funcion.existeVariable(v);
	  funcion.inicializaVariable(v);*/

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AP:{
      gramaticaLlamarFuncion(id, funcion);
      break;
      }
    case IGUAL:{
      asignacion(funcion);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void gramaticaLlamarFuncion(Token id, Funcion funcion) throws ParseException, SemanticException {int numArgumentos = 0;
  String valor;
  ArrayList<String> argumentos = new ArrayList<String>();
    jj_consume_token(AP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:
    case VALOR_ENTERO:
    case VALOR_DECIMAL:
    case VALOR_CADENA:{
      valor = valor(funcion);
numArgumentos++;
          argumentos.add(valor);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMA);
        valor = valor(funcion);
numArgumentos++;
          argumentos.add(valor);
      }
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(CP);
Funcion f = new Funcion();
                f.setId(id.image);
                f.setNumArgumentos(numArgumentos);
                adminFunciones.validaFuncion(f);
                adminFunciones.validaArgumentos(f,argumentos);
}

  static final public void asignacion(Funcion funcion) throws ParseException, SemanticException {
    jj_consume_token(IGUAL);
    operacion(funcion);
}

  static final public void operacion(Funcion funcion) throws ParseException, SemanticException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:
    case VALOR_ENTERO:
    case VALOR_DECIMAL:
    case VALOR_CADENA:{
      valor(funcion);
      break;
      }
    case AP:{
      opParentesis(funcion);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:
      case RESTA:
      case MULTI:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      opAritmetico();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:
      case VALOR_ENTERO:
      case VALOR_DECIMAL:
      case VALOR_CADENA:{
        valor(funcion);
        break;
        }
      case AP:{
        opParentesis(funcion);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static final public void opAritmetico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUMA:{
      jj_consume_token(SUMA);
      break;
      }
    case RESTA:{
      jj_consume_token(RESTA);
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
      break;
      }
    case MULTI:{
      jj_consume_token(MULTI);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void opParentesis(Funcion funcion) throws ParseException, SemanticException {
    jj_consume_token(AP);
    operacion(funcion);
    jj_consume_token(CP);
}

//Gramatica if
  static final public void gramaticaIf(Funcion funcion) throws ParseException, SemanticException {
    jj_consume_token(SI);
    condicion(funcion);
    jj_consume_token(ENTONCES);
    label_8:
    while (true) {
      sentencias(funcion);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case IMPRIMIR:
      case LEER:
      case SI:
      case SELECCIONA:
      case DESDE:
      case MIENTRAS:
      case HACER:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SINO:{
      jj_consume_token(SINO);
      label_9:
      while (true) {
        sentencias(funcion);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:
        case IMPRIMIR:
        case LEER:
        case SI:
        case SELECCIONA:
        case DESDE:
        case MIENTRAS:
        case HACER:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_9;
        }
      }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
    jj_consume_token(SI);
}

  static final public void condicion(Funcion funcion) throws ParseException, SemanticException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    condicionSimple(funcion);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      opLogico();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      condicionSimple(funcion);
    }
}

  static final public void condicionSimple(Funcion funcion) throws ParseException, SemanticException {
    valor(funcion);
    opRelacional();
    valor(funcion);
}

  static final public void opLogico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      break;
      }
    case OR:{
      jj_consume_token(OR);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void opRelacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAYOR:{
      jj_consume_token(MAYOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      break;
      }
    case MENOR:{
      jj_consume_token(MENOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:
      case MAYOR:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IGUAL:{
          jj_consume_token(IGUAL);
          break;
          }
        case MAYOR:{
          jj_consume_token(MAYOR);
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      break;
      }
    case IGUAL:{
      jj_consume_token(IGUAL);
      jj_consume_token(IGUAL);
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void gramaticaFor(Funcion funcion) throws ParseException, SemanticException {Token id;
    jj_consume_token(DESDE);
    id = identificador();
funcion.existeVariable(new Variable(id.image));
    jj_consume_token(IGUAL);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      id = identificador();
funcion.existeVariable(new Variable(id.image));
      break;
      }
    case VALOR_ENTERO:{
      jj_consume_token(VALOR_ENTERO);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(HASTA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      id = identificador();
funcion.existeVariable(new Variable(id.image));
      break;
      }
    case VALOR_ENTERO:{
      jj_consume_token(VALOR_ENTERO);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_11:
    while (true) {
      sentencias(funcion);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case IMPRIMIR:
      case LEER:
      case SI:
      case SELECCIONA:
      case DESDE:
      case MIENTRAS:
      case HACER:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_11;
      }
    }
    jj_consume_token(SIGUIENTE);
}

  static final public void gramaticaWhile(Funcion funcion) throws ParseException, SemanticException {
    jj_consume_token(MIENTRAS);
    condicion(funcion);
    jj_consume_token(HACER);
    label_12:
    while (true) {
      sentencias(funcion);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case IMPRIMIR:
      case LEER:
      case SI:
      case SELECCIONA:
      case DESDE:
      case MIENTRAS:
      case HACER:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        break label_12;
      }
    }
    jj_consume_token(FIN);
    jj_consume_token(MIENTRAS);
}

  static final public void gramaticaHacer(Funcion funcion) throws ParseException, SemanticException {
    jj_consume_token(HACER);
    label_13:
    while (true) {
      sentencias(funcion);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case IMPRIMIR:
      case LEER:
      case SI:
      case SELECCIONA:
      case DESDE:
      case MIENTRAS:
      case HACER:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_13;
      }
    }
    jj_consume_token(HASTA);
    condicion(funcion);
}

  static final public void gramaticaSwitch(Funcion funcion) throws ParseException, SemanticException {Token id;
    jj_consume_token(SELECCIONA);
    id = identificador();
funcion.existeVariable(new Variable(id.image));
    label_14:
    while (true) {
      jj_consume_token(CASO);
      jj_consume_token(VALOR_ENTERO);
      jj_consume_token(DP);
      label_15:
      while (true) {
        sentencias(funcion);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:
        case IMPRIMIR:
        case LEER:
        case SI:
        case SELECCIONA:
        case DESDE:
        case MIENTRAS:
        case HACER:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          break label_15;
        }
      }
      jj_consume_token(ROMPE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASO:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_14;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SINO:{
      jj_consume_token(SINO);
      jj_consume_token(DP);
      label_16:
      while (true) {
        sentencias(funcion);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:
        case IMPRIMIR:
        case LEER:
        case SI:
        case SELECCIONA:
        case DESDE:
        case MIENTRAS:
        case HACER:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          break label_16;
        }
      }
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
    jj_consume_token(SELECCIONA);
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyBasicTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1000000,0x700,0x80,0xc93880,0x2000000,0x0,0x700,0x0,0x0,0x0,0xc93880,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x3c000000,0x0,0x3c000000,0xc93880,0xc93880,0x8000,0x0,0x0,0x0,0x0,0x40000000,0xc0000000,0xc0000000,0xc0000000,0x0,0x0,0xc93880,0xc93880,0xc93880,0xc93880,0x20000,0xc93880,0x8000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x1000,0x0,0x200,0x0,0xf000,0x3000,0x80,0x1000,0xf080,0x0,0x200,0x200,0x10,0x200,0xf000,0xf010,0x0,0xf010,0x0,0x1000,0x1000,0x0,0x8,0x6,0x8,0x6,0x0,0x0,0x0,0x1,0x3000,0x3000,0x1000,0x1000,0x1000,0x1000,0x0,0x1000,0x0,};
	}

  /** Constructor with InputStream. */
  public MyBasic(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyBasic(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MyBasicTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyBasic(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MyBasicTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MyBasicTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyBasic(MyBasicTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyBasicTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[48];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 42; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 48; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
