/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(MyBasic)
package edu.itsco;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import edu.itsco.semantica.*;
import java.util.ArrayList;

public class MyBasic
{

  private static AdministraFunciones adminFunciones;
  
  public static void main(String args []) 
  {
    //MyBasic parser = new MyBasic(System.in);
    try {
    	adminFunciones = new AdministraFunciones();
	    MyBasic parser = new MyBasic(
	        new FileInputStream("entrada.txt"));
	    System.out.println("Bienvenidos al compilador");
	    parser.principal();
	   	adminFunciones.validaPrincipal();
	    System.out.println("Compilo correctamente");
	}catch(FileNotFoundException fex) {
		System.err.println("No encuento el archivo");
	}catch(ParseException pex) {
		System.err.println(pex.getMessage());
	}catch(SemanticException se) {
	  	System.err.println(se.getMessage());
	}catch(Exception e) {
		System.err.println(e.getMessage());
	}
  }
}

PARSER_END(MyBasic)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN: {
  < INICIO: "inicio" >
| < FIN: "fin" >

| < VAR: "var" >
| < ENTERO: "entero" >
| < DECIMAL: "decimal" >
| < CADENA: "cadena" >

| < IMPRIMIR: "imprimir" >
| < LEER: "leer" >

| < SI: "si" >
| < ENTONCES: "entonces" >
| < SINO: "sino" >

| < SELECCIONA: "selecciona" >
| < CASO: "caso" >
| < ROMPE: "rompe" >

| < DESDE: "desde" >
| < HASTA: "hasta" >
| < SIGUIENTE: "siguiente" >

| < MIENTRAS: "mientras" >
| < HACER: "hacer" >

| < FUNCION: "funcion" >
| < REGRESA: "regresa" >  	
}

TOKEN: {
  < SUMA: "+" >
| < RESTA: "-" >
| < MULTI: "*" >
| < DIV: "/" >
| < IGUAL: "=" >

| < MAYOR: ">" >
| < MENOR: "<" >

| < AND: "&&" >
| < OR: "||" >
| < NOT: "!" >

| < AP: "(" >
| < CP: ")" >

| < DP: ":" >

| < AC: "[" >
| < CC: "]" >

| < COMA: "," >
}

/* generados por REGEX */
TOKEN: {
  < #digito: ["0"-"9"] >
| < #letra: ["a"-"z","A"-"Z"] >

| < ID: (< letra > | "_" ) (< letra >| "_" |< digito >)* >
| < VALOR_ENTERO: (< digito >)+ >
| < VALOR_DECIMAL: (< digito >)+"."(< digito >)+ >
| < VALOR_CADENA: "\"" (~["\""])* "\"" >  

}

/* Gramaticas */
void principal() throws SemanticException: {
} {
	< INICIO > < ID >
		(		  gramaticaFuncion()
		)+
	< FIN >
}

void gramaticaFuncion() throws SemanticException:{
  Token id;
  int numArgumentos = 0;
  ArrayList<Variable > argumentos = new ArrayList<Variable>();
}{
	< FUNCION > [ tipoDato() ] id = <ID> < AP >
	[ argumentos = argumentos()] < CP >
	{
	 	Funcion funcion = new Funcion();
	 	funcion.setId(id.image);
		funcion.setNumArgumentos(argumentos.size());
		funcion.setArgumentos(argumentos);
	 	adminFunciones.agregaFuncion(funcion);
	}
		(		  sentencias(funcion)
		)*
		[ < REGRESA > valor(funcion)]
	< FIN > 
}

ArrayList<Variable> argumentos(): {
	int numArgumentos = 1;
	Token id;
	Token tipoDato;
	ArrayList<Variable> variables = new ArrayList<Variable>();
}
{
	//declararVariable() ( < COMA > declararVariable() )*
	< VAR > id = < ID > <DP > tipoDato = tipoDato()
	{
	  Variable v = new Variable(id.image, tipoDato.image);
	  v.setInicializada(true);
	  variables.add(v);
	} 
	(	  < COMA > < VAR > id = < ID > <DP > tipoDato = tipoDato()
	  { variables.add(new Variable(id.image, tipoDato.image));
	  }
	)*
	{
	  //return numArgumentos;
	  return variables;
	}
}

Token tipoDato():{
  Token tipo;
}{
	(	  tipo = < ENTERO > | tipo =  < DECIMAL > | tipo = < CADENA >
	)
	{
	  return tipo;
	}
}

String valor(Funcion funcion)throws SemanticException:{
  String valor;
  Token id;
}{
	(	  < VALOR_ENTERO > { valor = "entero";}
	| < VALOR_DECIMAL > { valor = "decimal"; }
	| < VALOR_CADENA > { valor = "cadena"; }
	| id = identificador() {
	  valor = id.image;
	  Variable v = new Variable(id.image);
	  funcion.existeVariable(v);
	  funcion.variableInicializada(v);
	 } 
	)
	{
		return valor;
	}
}

Token identificador(): {
	Token id;
}
{
	id = < ID > [ < AC > ( < VALOR_ENTERO > | < ID > )  < CC > ]
	{
		return id;
	}
}

void sentencias(Funcion funcion) throws SemanticException:{
}{
	declararVariable(funcion)
| 	gramaticaImprimir(funcion)
|   gramaticaLeer(funcion)
//|   asignacion()
| 	gramaticaIf(funcion)
|  	gramaticaFor(funcion)
| 	gramaticaWhile(funcion)
|   gramaticaHacer(funcion)
|   gramaticaSwitch(funcion)
|   decideFuncionOAsignacion(funcion)
//|  	gramaticaLlamarFuncion()
}

void declararVariable(Funcion funcion) throws SemanticException: {
  Token id;
  Token tipo;
} {
	< VAR > id = identificador() < DP > tipo = tipoDato()
	{
	  Variable v = new Variable(id.image, tipo.image);
	  funcion.agregarVariable(v);
	}
	[< IGUAL > ( valor(funcion) | inicializaArreglo(funcion) )
	   { v.setInicializada(true);}
	]	
}

void inicializaArreglo(Funcion funcion)throws SemanticException:{
}{
	< AC > valor(funcion) ( < COMA > valor(funcion) )* < CC >
}

//Gramatica imprimir
void gramaticaImprimir(Funcion funcion) throws SemanticException: { }
{
	< IMPRIMIR > < AP > valor(funcion) (< COMA > valor(funcion) )* < CP >
}

//Gramatica Leer
void gramaticaLeer(Funcion funcion)throws SemanticException: {
	Token id;
}
{
	< LEER > < AP > id = identificador() < CP >
	{
	  Variable v = new Variable(id.image);
	  funcion.existeVariable(v);
	  funcion.inicializaVariable(v);
	}
}

void decideFuncionOAsignacion(Funcion funcion) throws SemanticException: {
  Token id;
} {
    //id = < ID >
	id = identificador()
	{
	  Variable v = new Variable(id.image);
	  /*funcion.existeVariable(v);
	  funcion.inicializaVariable(v);*/
	}
	 (	  gramaticaLlamarFuncion(id, funcion)
	  | asignacion(funcion)
    )
}

void gramaticaLlamarFuncion(Token id, Funcion funcion)throws SemanticException: {
  int numArgumentos = 0;
  String valor;
  ArrayList<String> argumentos = new ArrayList<String>();
} {
     < AP > [
     	valor = valor(funcion) {
     	  numArgumentos++;
     	  argumentos.add(valor);
     	}
     	( < COMA > valor = valor(funcion) {
     	  numArgumentos++;
          argumentos.add(valor);
      } )*
     ] <CP >
     {
		Funcion f = new Funcion();
		f.setId(id.image);
		f.setNumArgumentos(numArgumentos);
		adminFunciones.validaFuncion(f);
		adminFunciones.validaArgumentos(f,argumentos);
     }
}

void asignacion(Funcion funcion) throws SemanticException: { }
{
	< IGUAL > operacion(funcion) 
}

void operacion(Funcion funcion)throws SemanticException: {
}
{
	( valor(funcion) | opParentesis (funcion) )
	 ( opAritmetico() ( valor(funcion) | opParentesis(funcion) ) ) *
}

void opAritmetico(): {
} {
	< SUMA > | < RESTA > | < DIV > | < MULTI > 
}

void opParentesis(Funcion funcion)throws SemanticException: {
}
{
	< AP > operacion(funcion) < CP >
}

//Gramatica if
void gramaticaIf(Funcion funcion) throws SemanticException: {
} {
	< SI > condicion(funcion) < ENTONCES >
		( sentencias(funcion) )+ 
	[< SINO >  ( sentencias(funcion) )+]
	< FIN > < SI >
}

void condicion(Funcion funcion) throws SemanticException: {
} {
	[< NOT > ]condicionSimple(funcion)
	( opLogico() [< NOT > ] condicionSimple(funcion)) * 
}

void condicionSimple(Funcion funcion) throws SemanticException: {
} {
	valor(funcion) opRelacional() valor(funcion)
}

void opLogico(): {
} {
	< AND > | < OR >
}

void opRelacional(): {
} {
	< MAYOR > [ <IGUAL> ]
|   < MENOR > [ <IGUAL > | < MAYOR > ]
| 	< IGUAL > < IGUAL >

}

void gramaticaFor(Funcion funcion) throws SemanticException: {
  Token id;
} {
	< DESDE > id = identificador() {
			funcion.existeVariable(new Variable(id.image));
	   } < IGUAL > ( id = identificador() {
			funcion.existeVariable(new Variable(id.image));
	   } | < VALOR_ENTERO > )
	 < HASTA > ( id = identificador() {
			funcion.existeVariable(new Variable(id.image));
	   } | < VALOR_ENTERO > )
		( sentencias(funcion) )+
	< SIGUIENTE >
}

void gramaticaWhile(Funcion funcion) throws SemanticException: {
} {
	< MIENTRAS > condicion(funcion) < HACER >
		( sentencias(funcion) )+
	< FIN > < MIENTRAS >
}

void gramaticaHacer(Funcion funcion) throws SemanticException: {
} {
	< HACER >
		( sentencias(funcion) )+
	< HASTA > condicion(funcion)
}

void gramaticaSwitch(Funcion funcion) throws SemanticException: {
  Token id;
} {
	< SELECCIONA > id = identificador() {
		funcion.existeVariable(new Variable(id.image));
	}
	 ( < CASO > <VALOR_ENTERO > < DP > (sentencias(funcion))+ < ROMPE >)+
	 [ < SINO > < DP > ( sentencias(funcion))+ ]
	< FIN > <SELECCIONA >
}

